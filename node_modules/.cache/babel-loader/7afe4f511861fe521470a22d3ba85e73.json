{"ast":null,"code":"var _jsxFileName = \"/Users/aalasseh/Desktop/srFECogngy/src/App.tsx\";\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { ChatBox } from \"./container/ChatBox\";\nimport { socket } from './api'; // const { REACT_APP_ENDPOINT_BASE_URL, REACT_APP_ENDPOINT_URL_TOKEN  } = process.env;\n\n/**\n * 1. Implement state management.\n * Submitting a message should let it appear in the message history as an \"outgoing message\"\n * You can use either react-redux or builtins from react to solve this\n *\n * import { createStore } from \"@reduxjs/toolkit\";\n * import { Provider } from \"react-redux\";\n *\n * OR\n *\n * import { useReducer, useContext, createContext } from 'react';\n */\n\n/**\n * 2. Connect with backend.\n * Use an instance of the SocketClient from the @cognigy/socket-client package to send and receive messages to the bot.\n * https://www.npmjs.com/package/@cognigy/socket-client\n * Use URL and Token as described in the challenge\n *\n * Bot outputs should appear in the message history as \"incoming\"\n *\n * The bot will greet \"Hello There\" on your first message and then reply with a quote of the text you sent to it.\n * Hint: the \"Hello There\" response should not appear more than _once_ in your conversation history.\n *\n * import { SocketClient } from \"@cognigy/socket-client\";\n * const { ENDPOINT_BASE_URL, ENDPOINT_URL_TOKEN } = process.env;\n */\n\n/**\n * 3. Auto-Scroll History\n * When the message history is \"full\", it should automatically scroll to the bottom when new content arrives.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  socket.initScoket();\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(ChatBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/aalasseh/Desktop/srFECogngy/src/App.tsx"],"names":["store","Provider","ChatBox","socket","App","initScoket"],"mappings":";AACA,OAAQA,KAAR,MAAoB,eAApB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,MAAT,QAAsB,OAAtB,C,CAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAEA,eAAgB,SAASC,GAAT,GAAe;AAC7BD,EAAAA,MAAM,CAACE,UAAP;AACA,sBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEL,KAAjB;AAAA,2BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;KAPwBI,G","sourcesContent":["\nimport  store  from './redux/store';\nimport { Provider } from 'react-redux';\nimport { ChatBox } from \"./container/ChatBox\";\nimport { socket} from './api'\n\n\n \n// const { REACT_APP_ENDPOINT_BASE_URL, REACT_APP_ENDPOINT_URL_TOKEN  } = process.env;\n/**\n * 1. Implement state management.\n * Submitting a message should let it appear in the message history as an \"outgoing message\"\n * You can use either react-redux or builtins from react to solve this\n *\n * import { createStore } from \"@reduxjs/toolkit\";\n * import { Provider } from \"react-redux\";\n *\n * OR\n *\n * import { useReducer, useContext, createContext } from 'react';\n */\n\n/**\n * 2. Connect with backend.\n * Use an instance of the SocketClient from the @cognigy/socket-client package to send and receive messages to the bot.\n * https://www.npmjs.com/package/@cognigy/socket-client\n * Use URL and Token as described in the challenge\n *\n * Bot outputs should appear in the message history as \"incoming\"\n *\n * The bot will greet \"Hello There\" on your first message and then reply with a quote of the text you sent to it.\n * Hint: the \"Hello There\" response should not appear more than _once_ in your conversation history.\n *\n * import { SocketClient } from \"@cognigy/socket-client\";\n * const { ENDPOINT_BASE_URL, ENDPOINT_URL_TOKEN } = process.env;\n */\n\n/**\n * 3. Auto-Scroll History\n * When the message history is \"full\", it should automatically scroll to the bottom when new content arrives.\n */\n\nexport default  function App() {\n  socket.initScoket();\n  return (\n    <Provider store={store}>\n      <ChatBox/>\n    </Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}