{"ast":null,"code":"import _asyncToGenerator from \"/Users/aalasseh/Desktop/srFECogngy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/aalasseh/Desktop/srFECogngy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aalasseh/Desktop/srFECogngy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/aalasseh/Desktop/srFECogngy/node_modules/@babel/runtime/regenerator/index.js\";\nimport { SocketClient } from \"@cognigy/socket-client\";\nimport { storeMessage } from '../redux/actions/messages';\nimport { setLoader } from '../redux/actions/loader';\nimport store from '../redux/store';\nvar _process$env = process.env,\n    REACT_APP_ENDPOINT_BASE_URL = _process$env.REACT_APP_ENDPOINT_BASE_URL,\n    REACT_APP_ENDPOINT_URL_TOKEN = _process$env.REACT_APP_ENDPOINT_URL_TOKEN;\n\nvar SocketClientApi = /*#__PURE__*/function () {\n  function SocketClientApi() {\n    var baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : REACT_APP_ENDPOINT_BASE_URL;\n    var urlToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : REACT_APP_ENDPOINT_URL_TOKEN;\n\n    _classCallCheck(this, SocketClientApi);\n\n    this.baseUrl = void 0;\n    this.urlToken = void 0;\n    this.client = void 0;\n    this.baseUrl = baseUrl;\n    this.urlToken = urlToken;\n    this.client = new SocketClient(this.baseUrl, this.urlToken, {\n      // if you use node, internet explorer or safari, you need to enforce websockets\n      forceWebsockets: true\n    });\n  }\n\n  _createClass(SocketClientApi, [{\n    key: \"initScoket\",\n    value: function () {\n      var _initScoket = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.client.on(\"output\", function (output) {\n                  store.dispatch(storeMessage(output));\n                  store.dispatch(setLoader(false));\n                });\n                _context.next = 3;\n                return this.client.connect();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initScoket() {\n        return _initScoket.apply(this, arguments);\n      }\n\n      return initScoket;\n    }()\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                try {\n                  store.dispatch(setLoader(true));\n                  this.client.sendMessage(message, {});\n                } catch (e) {\n                  console.log(\"e=>\", e);\n                }\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sendMessage(_x) {\n        return _sendMessage.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n  }]);\n\n  return SocketClientApi;\n}();\n\nexport var socket = new SocketClientApi();","map":{"version":3,"sources":["/Users/aalasseh/Desktop/srFECogngy/src/api/index.tsx"],"names":["SocketClient","storeMessage","setLoader","store","process","env","REACT_APP_ENDPOINT_BASE_URL","REACT_APP_ENDPOINT_URL_TOKEN","SocketClientApi","baseUrl","urlToken","client","forceWebsockets","on","output","dispatch","connect","message","sendMessage","e","console","log","socket"],"mappings":";;;;AAAA,SAASA,YAAT,QAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAUA,mBAAsEC,OAAO,CAACC,GAA9E;AAAA,IAAQC,2BAAR,gBAAQA,2BAAR;AAAA,IAAqCC,4BAArC,gBAAqCA,4BAArC;;IAGMC,e;AAMJ,6BAA4F;AAAA,QAAhFC,OAAgF,uEAAtEH,2BAAsE;AAAA,QAAzCI,QAAyC,uEAA9BH,4BAA8B;;AAAA;;AAAA,SAJ5FE,OAI4F;AAAA,SAH5FC,QAG4F;AAAA,SAF5FC,MAE4F;AAC1F,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAc,IAAIX,YAAJ,CAAiB,KAAKS,OAAtB,EAA+B,KAAKC,QAApC,EAA8C;AAC1D;AACAE,MAAAA,eAAe,EAAE;AAFyC,KAA9C,CAAd;AAID;;;;;iFAED;AAAA;AAAA;AAAA;AAAA;AAEE,qBAAKD,MAAL,CAAYE,EAAZ,CAAe,QAAf,EAAyB,UAACC,MAAD,EAAY;AAElCX,kBAAAA,KAAK,CAACY,QAAN,CAAed,YAAY,CAACa,MAAD,CAA3B;AACAX,kBAAAA,KAAK,CAACY,QAAN,CAAeb,SAAS,CAAC,KAAD,CAAxB;AAEF,iBALD;AAFF;AAAA,uBASQ,KAAKS,MAAL,CAAYK,OAAZ,EATR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kFAaA,kBAAkBC,OAAlB;AAAA;AAAA;AAAA;AAAA;AACE,oBAAI;AACFd,kBAAAA,KAAK,CAACY,QAAN,CAAeb,SAAS,CAAC,IAAD,CAAxB;AACA,uBAAKS,MAAL,CAAYO,WAAZ,CAAwBD,OAAxB,EAAiC,EAAjC;AAED,iBAJD,CAIE,OAAOE,CAAP,EAAU;AACVC,kBAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,CAAnB;AACD;;AAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAcF,OAAO,IAAMG,MAAM,GAAG,IAAId,eAAJ,EAAf","sourcesContent":["import { SocketClient } from \"@cognigy/socket-client\";\nimport { storeMessage } from '../redux/actions/messages';\nimport { setLoader } from '../redux/actions/loader';\nimport store from '../redux/store';\n\ndeclare var process: {\n  env: {\n    REACT_APP_ENDPOINT_BASE_URL: string,\n    REACT_APP_ENDPOINT_URL_TOKEN: string\n  }\n}\n\n\nconst { REACT_APP_ENDPOINT_BASE_URL, REACT_APP_ENDPOINT_URL_TOKEN } = process.env;\n\n\nclass SocketClientApi {\n\n  baseUrl: string;\n  urlToken: string\n  client: SocketClient\n\n  constructor(baseUrl = REACT_APP_ENDPOINT_BASE_URL, urlToken = REACT_APP_ENDPOINT_URL_TOKEN) {\n    this.baseUrl = baseUrl;\n    this.urlToken = urlToken;\n    this.client = new SocketClient(this.baseUrl, this.urlToken, {\n      // if you use node, internet explorer or safari, you need to enforce websockets\n      forceWebsockets: true,\n    });\n  }\n\n  async initScoket() {\n\n    this.client.on(\"output\", (output) => {\n\n       store.dispatch(storeMessage(output));\n       store.dispatch(setLoader(false));\n\n    });\n\n    await this.client.connect();\n\n  }\n\n  async sendMessage(message: string) {\n    try {\n      store.dispatch(setLoader(true));\n      this.client.sendMessage(message, {});\n\n    } catch (e) {\n      console.log(\"e=>\", e)\n    }\n\n  }\n\n\n}\n\nexport const socket = new SocketClientApi();\n"]},"metadata":{},"sourceType":"module"}